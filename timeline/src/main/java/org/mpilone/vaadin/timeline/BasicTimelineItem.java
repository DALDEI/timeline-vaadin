
package org.mpilone.vaadin.timeline;

import java.util.*;

import org.mpilone.vaadin.timeline.TimelineOptions.ItemType;


/**
 * A timeline event implementation that stores all the data as a simple Java
 * bean.
 *
 * @author mpilone
 */
public class BasicTimelineItem implements TimelineItem {

  private String groupId;
  private Date start;
  private Date end;
  private String content;
  private ItemType type;
  private String styleName;
  private Object id;
  private String title;
  private Boolean editable;

  /**
   * Constructs the item which will have an ID generated by {@link UUID}, start
   * of "now", no end date, and an empty string caption.
   */
  public BasicTimelineItem() {
    this(UUID.randomUUID().toString(), new Date(), null, "");
  }

  /**
   * Constructs the item.
   *
   * @param id the unique ID of the item
   * @param start the start date
   * @param end the optional end date
   * @param content the content (i.e. label) of the item
   */
  public BasicTimelineItem(Object id, Date start, Date end, String content) {
    this.start = start;
    this.end = end;
    this.content = content;
    this.id = id;
  }

  @Override
  public Object getId() {
    return id;
  }

  /**
   * Sets the unique ID of the item which is used to track selection.
   *
   * @param id the ID of the item
   */
  public void setId(Object id) {
    this.id = id;
  }

  @Override
  public String getGroupId() {
    return groupId;
  }

  /**
   * Sets the optional ID of the group that this item should be associated with.
   * All items with the same group ID will be placed into the group row in the
   * UI.
   *
   * @param groupId the ID of the group to be placed in or null for no group
   */
  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  @Override
  public Date getStart() {
    return start;
  }

  /**
   * Sets the start date of the item on the timeline.
   *
   * @param start the start date
   */
  public void setStart(Date start) {
    this.start = start;
  }

  @Override
  public Date getEnd() {
    return end;
  }

  /**
   * Sets the optional end date of the item on the timeline.
   *
   * @param end the end date
   */
  public void setEnd(Date end) {
    this.end = end;
  }

  @Override
  public String getContent() {
    return content;
  }

  /**
   * Returns the content string that will be used as the items label on the
   * timeline.
   *
   * @param content the label text
   */
  public void setContent(String content) {
    this.content = content;
  }

  @Override
  public ItemType getType() {
    return type;
  }

  /**
   * Sets the optional item type which controls how the item is rendered. If not
   * specified, the default item type configured in the timeline options will be
   * used.
   *
   * @param type the type of the item or null to use the default
   */
  public void setType(ItemType type) {
    this.type = type;
  }

  @Override
  public String getStyleName() {
    return styleName;
  }

  /**
   * Sets the optional CSS style name(s) to be applied to the item.
   *
   * @param styleName the CSS style name(s)
   */
  public void setStyleName(String styleName) {
    this.styleName = styleName;
  }

  /**
   * Sets the title for the item, displayed when holding the mouse on the item.
   * The title can only contain plain text.
   *
   * @param title the title or null if not set
   */
  public void setTitle(String title) {
    this.title = title;
  }

  @Override
  public String getTitle() {
    return this.title;
  }

  @Override
  public Boolean getEditable() {
    return editable;
  }

}
